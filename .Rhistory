getwd()
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
cat('\014')
graphics.off()
library('rjags')
library('tidyverse')
library('data.table')
library('gplots')
library('stringr')
library('reshape2')
library('ggpubr')
library('ggnewscale')
library('dtw')  #time series clustering
source('G:/My Drive/20230815_GlobBurdDisease/DBDA2E-utilities_mod.R')  #modified to fit markdown
allTime_HTZ_Deaths= read.csv('G:/My Drive/20230815_GlobBurdDisease/20230823_Deaths_HTZ_21reg_MF_5year/IHME-GBD_2019_DATA-afd4b08e-1.csv',stringsAsFactors = TRUE)   #HTZ= "Tuberculosis","HIV/AIDS","Zika virus"
#limit to metric== 'Percent' and remove 'Number'
allTime_HTZ_Deaths= allTime_HTZ_Deaths[allTime_HTZ_Deaths$metric=='Percent',]
allTime_HTZ_PrevInci= read.csv('G:/My Drive/20230815_GlobBurdDisease/20230907_PrevInci_HTZ_21reg_MF_5year/IHME-GBD_2019_DATA-cacc055a-1.csv',stringsAsFactors = TRUE)
allTime_HTZ= rbind.data.frame(allTime_HTZ_Deaths,allTime_HTZ_PrevInci)
unique(allTime_HTZ$age) #this indicates entry "80-84" instead of "80-84 years" and two other such cases
levels(allTime_HTZ$age)[levels(allTime_HTZ$age)=='80-84']= '80-84 years'
levels(allTime_HTZ$age)[levels(allTime_HTZ$age)=='85-89']= '85-89 years'
levels(allTime_HTZ$age)[levels(allTime_HTZ$age)=='90-94']= '90-94 years'
levels(allTime_HTZ$age)
# Not all ages are in 5-year intervals -> remove the ones that are not
unique(allTime_HTZ$age[ str_detect(allTime_HTZ$age,'[0-9]+-[0-9]+ years')] ) #check
allTime_HTZ= allTime_HTZ[ str_detect(allTime_HTZ$age,'[0-9]+-[0-9]+ years'), ]
cause_location_tab= allTime_HTZ %>%
filter(measure=='Deaths' & sex=='Male' & age=='30-34 years' ) %>%
group_by(cause,location) %>%
summarise(count= n_distinct(year))
dim(allTime_HTZ)
head(allTime_HTZ)
str(allTime_HTZ)
#all location - cause combinations should have 30 years
all(cause_location_tab$count == 30)
allTime_HTZ$disFac= as.numeric(as.factor(allTime_HTZ$cause))
dim(allTime_HTZ)
summary(allTime_HTZ$val)
summary(allTime_HTZ$year)
hist(allTime_HTZ$val[allTime_HTZ$measure=='Deaths'],main='Death percentages - all margins')
hist(allTime_HTZ$val[allTime_HTZ$measure=='Deaths'],xlim=c(0,0.1),breaks= 200,main='Zoom: Death percentages - all margins')
hist(allTime_HTZ$val[allTime_HTZ$measure=='Prevalence'],main='Prevalence percentages - all margins')
allTime_HTZ_asi= data.frame( allTime_HTZ %>%   #asi= age-, sex- independent
group_by(measure,location,cause,disFac,year) %>%
summarize(val= mean(val)) )
head(allTime_HTZ_asi)
dim(allTime_HTZ_asi)
?summarise
allTime_HTZ_asi= data.frame( allTime_HTZ %>%   #asi= age-, sex- independent
group_by(measure,location,cause,disFac,year) %>%
summarize(val= mean(val),.groups=c(measure,location,cause,disFac,year)) )
allTime_HTZ_asi= data.frame( allTime_HTZ %>%   #asi= age-, sex- independent
group_by(measure,location,cause,disFac,year) %>%
summarize(val= mean(val),.groups=c('measure','location','cause','disFac','year')) )
allTime_HTZ_asi= data.frame( allTime_HTZ %>%   #asi= age-, sex- independent
group_by(measure,location,cause,disFac,year) %>%
summarize(val= mean(val)) )
head(allTime_HTZ_asi)
dim(allTime_HTZ_asi)
allTime_HTZ_asi= data.frame( allTime_HTZ %>%   #asi= age-, sex- independent
group_by(measure,location,cause,disFac,year) %>%
summarize(val= mean(val)),.group='drop' )
head(allTime_HTZ_asi)
dim(allTime_HTZ_asi)
allTime_HTZ_asi= data.frame( allTime_HTZ %>%   #asi= age-, sex- independent
group_by(measure,location,cause,disFac,year) %>%
summarize(val= mean(val),.group='drop') )
head(allTime_HTZ_asi)
dim(allTime_HTZ_asi)
allTime_HTZ_asi_D= allTime_HTZ_asi %>%
filter(measure=='Deaths')
ggplot(data=allTime_HTZ_asi_D,mapping=aes(x=year,y=val,group=location,color=location))+
geom_point()+
geom_line()+
facet_wrap(~cause,scales='free_y')+
guides(color='none')
allTime_HTZ_asi_D_sums= allTime_HTZ_asi_D %>%
group_by(location,cause) %>%
summarize(sumPerc= sum(val))
allTime_HTZ_asi_D_sums[allTime_HTZ_asi_D_sums$sumPerc==0,]
allTime_HTZ_asi_D_sums= allTime_HTZ_asi_D %>%
group_by(location,cause) %>%
summarize(sumPerc= sum(val),.group='drop')
allTime_HTZ_asi_D_sums[allTime_HTZ_asi_D_sums$sumPerc==0,]
allTime_HTZ_asi_D_sums= allTime_HTZ_asi_D %>%
group_by(location,cause) %>%
summarize(sumPerc= sum(val),.groups='drop')
allTime_HTZ_asi_D_sums[allTime_HTZ_asi_D_sums$sumPerc==0,]
allTime_HTZ_asi_D_norm= allTime_HTZ_asi_D %>%
group_by(location,cause,disFac) %>%
mutate(val_maxNorm= val/ifelse(max(val)>0,max(val),1) ) %>%
ungroup()
ggplot(data=allTime_HTZ_asi_D_norm,mapping=aes(x=year,y=val_maxNorm,group=location,color=location))+
geom_point()+
geom_line()+
theme(axis.title.y= element_text('Normalized to highest incidence year'))+
facet_wrap(~cause,scales='free_y')+
guides(color='none')
source('G:/My Drive/20230815_GlobBurdDisease/20230905_twoLine_fit.R')
allTime_HT_asi= allTime_HTZ_asi[allTime_HTZ_asi$cause %in% c('HIV/AIDS','Tuberculosis'),]
#allTime_HT_asi_D= allTime_HT_asi[allTime_HT_asi$measure=='Deaths',]
groupedDF= allTime_HT_asi %>%
group_by(location,cause,measure) %>%
summarize(n())
dim(groupedDF) #126 combinations
head(allTime_HT_asi)
if(! file.exists('G:/My Drive/20230815_GlobBurdDisease/20230908_MCMCcoefs.csv')){ #execute only if not yet done
MCMCcoefs_DF= data.frame( matrix(NA,nrow=dim(groupedDF)[1],ncol=7))
colnames(MCMCcoefs_DF)= c('location','cause','measure',
'b0_median','b1_median','b2_median','t_inflec_median')
MCMCcoefs_DF$location <- factor(MCMCcoefs_DF$location, levels = levels(groupedDF$location))
MCMCcoefs_DF$cause <- factor(MCMCcoefs_DF$cause, levels = levels(groupedDF$cause))
MCMCcoefs_DF$measure <- factor(MCMCcoefs_DF$measure, levels = levels(groupedDF$measure))
for(i in 1:dim(groupedDF)[1]){
print(paste(i,'of',dim(groupedDF)[1]))
currDF= allTime_HT_asi[allTime_HT_asi$location==groupedDF$location[i] &
allTime_HT_asi$cause==groupedDF$cause[i] &
allTime_HT_asi$measure==groupedDF$measure[i]  ,]
mcmcDF= twoLine_fit(t= currDF$year, y=currDF$val)
HDIlower_b1= HDIofMCMC(mcmcDF$b1,credMass=.80)[1]  #lower bound of HDI -> greater than 0?
HDIupper_b2= HDIofMCMC(mcmcDF$b2,credMass=.80)[2]  #upper bound of HDI -> lower than 0?
# ! I use 80%, rather than 95% credibility intervals; while individual cases
#may be incorrectly classified, overall trends should be correct; a high false-negative
#rate needs to be avoided
#Analysis could be extended by cases cross-informing each other (e.g. countries from same
#region)
MCMCcoefs_DF$location[i]= groupedDF$location[i]
MCMCcoefs_DF$cause[i]= groupedDF$cause[i]
MCMCcoefs_DF$measure[i]= groupedDF$measure[i]
MCMCcoefs_DF$b0_median[i]= median(mcmcDF$b0)
#only store rates if confidently different from 0
MCMCcoefs_DF$b1_median[i]= ifelse(HDIlower_b1>0,median(mcmcDF$b1),NA)
MCMCcoefs_DF$b2_median[i]= ifelse(HDIupper_b2<0,median(mcmcDF$b2),NA)
#only store inflection point if both rates confidently different from 0
MCMCcoefs_DF$t_inflec_median[i]=
ifelse(HDIlower_b1>0 & HDIupper_b2<0,median(mcmcDF$t0),NA)
}
# write output so you do not need to run this code every time
write.csv(MCMCcoefs_DF,
'G:/My Drive/20230815_GlobBurdDisease/20230908_MCMCcoefs.csv',
row.names = FALSE)
} else {
MCMCcoefs_DF= read.csv('G:/My Drive/20230815_GlobBurdDisease/20230908_MCMCcoefs.csv',
stringsAsFactors=TRUE)
}
str(MCMCcoefs_DF)
dim(MCMCcoefs_DF)
source('G:/My Drive/20230815_GlobBurdDisease/20230905_twoLine_fit.R')
allTime_HT_asi= allTime_HTZ_asi[allTime_HTZ_asi$cause %in% c('HIV/AIDS','Tuberculosis'),]
#allTime_HT_asi_D= allTime_HT_asi[allTime_HT_asi$measure=='Deaths',]
groupedDF= allTime_HT_asi %>%
group_by(location,cause,measure) %>%
summarize(n(),.groups='drop')
dim(groupedDF) #126 combinations
head(allTime_HT_asi)
if(! file.exists('G:/My Drive/20230815_GlobBurdDisease/20230908_MCMCcoefs.csv')){ #execute only if not yet done
MCMCcoefs_DF= data.frame( matrix(NA,nrow=dim(groupedDF)[1],ncol=7))
colnames(MCMCcoefs_DF)= c('location','cause','measure',
'b0_median','b1_median','b2_median','t_inflec_median')
MCMCcoefs_DF$location <- factor(MCMCcoefs_DF$location, levels = levels(groupedDF$location))
MCMCcoefs_DF$cause <- factor(MCMCcoefs_DF$cause, levels = levels(groupedDF$cause))
MCMCcoefs_DF$measure <- factor(MCMCcoefs_DF$measure, levels = levels(groupedDF$measure))
for(i in 1:dim(groupedDF)[1]){
print(paste(i,'of',dim(groupedDF)[1]))
currDF= allTime_HT_asi[allTime_HT_asi$location==groupedDF$location[i] &
allTime_HT_asi$cause==groupedDF$cause[i] &
allTime_HT_asi$measure==groupedDF$measure[i]  ,]
mcmcDF= twoLine_fit(t= currDF$year, y=currDF$val)
HDIlower_b1= HDIofMCMC(mcmcDF$b1,credMass=.80)[1]  #lower bound of HDI -> greater than 0?
HDIupper_b2= HDIofMCMC(mcmcDF$b2,credMass=.80)[2]  #upper bound of HDI -> lower than 0?
# ! I use 80%, rather than 95% credibility intervals; while individual cases
#may be incorrectly classified, overall trends should be correct; a high false-negative
#rate needs to be avoided
#Analysis could be extended by cases cross-informing each other (e.g. countries from same
#region)
MCMCcoefs_DF$location[i]= groupedDF$location[i]
MCMCcoefs_DF$cause[i]= groupedDF$cause[i]
MCMCcoefs_DF$measure[i]= groupedDF$measure[i]
MCMCcoefs_DF$b0_median[i]= median(mcmcDF$b0)
#only store rates if confidently different from 0
MCMCcoefs_DF$b1_median[i]= ifelse(HDIlower_b1>0,median(mcmcDF$b1),NA)
MCMCcoefs_DF$b2_median[i]= ifelse(HDIupper_b2<0,median(mcmcDF$b2),NA)
#only store inflection point if both rates confidently different from 0
MCMCcoefs_DF$t_inflec_median[i]=
ifelse(HDIlower_b1>0 & HDIupper_b2<0,median(mcmcDF$t0),NA)
}
# write output so you do not need to run this code every time
write.csv(MCMCcoefs_DF,
'G:/My Drive/20230815_GlobBurdDisease/20230908_MCMCcoefs.csv',
row.names = FALSE)
} else {
MCMCcoefs_DF= read.csv('G:/My Drive/20230815_GlobBurdDisease/20230908_MCMCcoefs.csv',
stringsAsFactors=TRUE)
}
str(MCMCcoefs_DF)
dim(MCMCcoefs_DF)
source('./20230905_twoLine_fit.R')
wd= getwd()
wd
source('G:/My Drive/20230815_GlobBurdDisease/20230905_twoLine_fit.R')
allTime_HT_asi= allTime_HTZ_asi[allTime_HTZ_asi$cause %in% c('HIV/AIDS','Tuberculosis'),]
#allTime_HT_asi_D= allTime_HT_asi[allTime_HT_asi$measure=='Deaths',]
groupedDF= allTime_HT_asi %>%
group_by(location,cause,measure) %>%
summarize(n(),.groups='drop')
dim(groupedDF) #126 combinations
head(allTime_HT_asi)
if(! file.exists('G:/My Drive/20230815_GlobBurdDisease/20230908_MCMCcoefs.csv')){ #execute only if not yet done
MCMCcoefs_DF= data.frame( matrix(NA,nrow=dim(groupedDF)[1],ncol=7))
colnames(MCMCcoefs_DF)= c('location','cause','measure',
'b0_median','b1_median','b2_median','t_inflec_median')
MCMCcoefs_DF$location <- factor(MCMCcoefs_DF$location, levels = levels(groupedDF$location))
MCMCcoefs_DF$cause <- factor(MCMCcoefs_DF$cause, levels = levels(groupedDF$cause))
MCMCcoefs_DF$measure <- factor(MCMCcoefs_DF$measure, levels = levels(groupedDF$measure))
for(i in 1:dim(groupedDF)[1]){
print(paste(i,'of',dim(groupedDF)[1]))
currDF= allTime_HT_asi[allTime_HT_asi$location==groupedDF$location[i] &
allTime_HT_asi$cause==groupedDF$cause[i] &
allTime_HT_asi$measure==groupedDF$measure[i]  ,]
mcmcDF= twoLine_fit(t= currDF$year, y=currDF$val)
HDIlower_b1= HDIofMCMC(mcmcDF$b1,credMass=.80)[1]  #lower bound of HDI -> greater than 0?
HDIupper_b2= HDIofMCMC(mcmcDF$b2,credMass=.80)[2]  #upper bound of HDI -> lower than 0?
# ! I use 80%, rather than 95% credibility intervals; while individual cases
#may be incorrectly classified, overall trends should be correct; a high false-negative
#rate needs to be avoided
#Analysis could be extended by cases cross-informing each other (e.g. countries from same
#region)
MCMCcoefs_DF$location[i]= groupedDF$location[i]
MCMCcoefs_DF$cause[i]= groupedDF$cause[i]
MCMCcoefs_DF$measure[i]= groupedDF$measure[i]
MCMCcoefs_DF$b0_median[i]= median(mcmcDF$b0)
#only store rates if confidently different from 0
MCMCcoefs_DF$b1_median[i]= ifelse(HDIlower_b1>0,median(mcmcDF$b1),NA)
MCMCcoefs_DF$b2_median[i]= ifelse(HDIupper_b2<0,median(mcmcDF$b2),NA)
#only store inflection point if both rates confidently different from 0
MCMCcoefs_DF$t_inflec_median[i]=
ifelse(HDIlower_b1>0 & HDIupper_b2<0,median(mcmcDF$t0),NA)
}
# write output so you do not need to run this code every time
write.csv(MCMCcoefs_DF,
'G:/My Drive/20230815_GlobBurdDisease/20230908_MCMCcoefs.csv',
row.names = FALSE)
} else {
MCMCcoefs_DF= read.csv('G:/My Drive/20230815_GlobBurdDisease/20230908_MCMCcoefs.csv',
stringsAsFactors=TRUE)
}
str(MCMCcoefs_DF)
dim(MCMCcoefs_DF)
MCMCcoefs_DF$b0_median= as.numeric(MCMCcoefs_DF$b0_median)
MCMCcoefs_DF$b1_median= as.numeric(MCMCcoefs_DF$b1_median)
MCMCcoefs_DF$b2_median= as.numeric(MCMCcoefs_DF$b2_median)
MCMCcoefs_DF$t_inflec_median= as.numeric(MCMCcoefs_DF$t_inflec_median)
str(MCMCcoefs_DF)
ggplot(data=allTime_HT_asi[ allTime_HT_asi$cause=='HIV/AIDS',  ],
mapping=aes(x=year,y=val,group=measure,color=measure))+
geom_line()+
ggtitle('HIV/AIDS')+
guides(color="none")+
facet_wrap(vars(location),ncol=7,scales='free_y')  #look at both fixed and free y
leg= ggpubr::get_legend(ggplot(data=allTime_HT_asi[ allTime_HT_asi$cause=='HIV/AIDS',  ],
mapping=aes(x=year,y=val,group=measure,color=measure))+
geom_line())
ggplot(data=allTime_HT_asi[ allTime_HT_asi$cause=='Tuberculosis',  ],
mapping=aes(x=year,y=val,group=measure,color=measure))+
geom_line()+
ggtitle('Tuberculosis')+
guides(color="none")+
facet_wrap(vars(location),ncol=7)  #,scales='free_y' look at both fixed and free y
leg= ggpubr::get_legend(ggplot(data=allTime_HT_asi[ allTime_HT_asi$cause=='HIV/AIDS',  ],
mapping=aes(x=year,y=val,group=measure,color=measure))+
geom_line())
as_ggplot(leg)
MCMCcoefs_DF$loc_cause= paste(MCMCcoefs_DF$location,MCMCcoefs_DF$cause,sep=', ')
str(MCMCcoefs_DF)
#pivot:
MCMCcoefs_wide= pivot_wider(data=MCMCcoefs_DF,id_cols=c('loc_cause','location','cause'),
names_from = c('measure'),
values_from=c('b0_median','b1_median','b2_median','t_inflec_median'))
#manually sorted:
MCMCcoefs_DF_NA= MCMCcoefs_wide[is.na(MCMCcoefs_wide$t_inflec_median_Deaths),] #no inflection point
MCMCcoefs_DF_noNA= MCMCcoefs_wide[!is.na(MCMCcoefs_wide$t_inflec_median_Deaths),] #with inflection point
#out of the data that do not have inflection year, get the ones that have decline
MCMCcoefs_DF_NA_decl= MCMCcoefs_DF_NA[!is.na(MCMCcoefs_DF_NA$b2_median_Deaths),]
MCMCcoefs_DF_NA_nodecl= MCMCcoefs_DF_NA[is.na(MCMCcoefs_DF_NA$b2_median_Deaths),]
#sort data with declining death rate (but no inflection) by decline of death rate
ord1= order(MCMCcoefs_DF_NA_decl$b2_median_Deaths)
#sort data with inflection by inflection year
ord2= order(MCMCcoefs_DF_noNA$t_inflec_median_Deaths) + max(ord1) #start after ord1
#sort data without declining death rate by increase in death rate
ord3= order(MCMCcoefs_DF_NA_nodecl$b1_median_Deaths) + max(ord2) #start after ord2
#order factor levels of 'loc_cause'
MCMCcoefs_patchw= rbind.data.frame(MCMCcoefs_DF_NA_decl,MCMCcoefs_DF_noNA,MCMCcoefs_DF_NA_nodecl)
ord= c(ord1,ord2,ord3)
MCMCcoefs_patchw$loc_cause= factor(MCMCcoefs_patchw$loc_cause,ordered=TRUE,
levels= MCMCcoefs_patchw$loc_cause[ord])
DrD_melt= melt(MCMCcoefs_patchw,id.vars= c('loc_cause','location','cause'),
measure.vars=
c('b0_median_Deaths','b1_median_Deaths','b2_median_Deaths','t_inflec_median_Deaths',
'b0_median_Prevalence','b1_median_Prevalence',
'b2_median_Prevalence'  ))
#drop Incidence (very low):'b0_median_Incidence', 'b1_median_Incidence','b2_median_Incidence','t_inflec_median_Incidence'
#drop inflection of prevalence (very few observed): ,'t_inflec_median_Prevalence'
str(DrD_melt)
DrD_melt$coefType= rep('rate',dim(DrD_melt)[1])
DrD_melt$coefType[DrD_melt$variable %in% c('b0_median_Deaths',
'b0_median_Prevalence','b0_median_Incidence')]= 'basel.'
DrD_melt$coefType[DrD_melt$variable %in% c('t_inflec_median_Deaths',
't_inflec_median_Prevalence','t_inflec_median_Incidence')]= 'year'
head(DrD_melt)
ggplot()+
geom_tile(data=DrD_melt[DrD_melt$coefType=='rate',],aes(x=variable,y=loc_cause,fill=value))+
scale_fill_distiller(type = "seq", palette = "RdBu", guide = guide_colorbar(title.position = "top")) +
ggnewscale::new_scale_fill() +
#geom_tile(data=DrD_melt[DrD_melt$coefType=='basel.',],aes(x=variable,y=loc_cause,fill=value))+
#scale_fill_distiller(type = "seq", palette = "Blues", guide=guide_colorbar(title.position = "top")) +
#ggnewscale::new_scale_fill() +
geom_tile(data=DrD_melt[DrD_melt$coefType=='year',],aes(x=variable,y=loc_cause,fill=value))+
scale_fill_distiller(type = "div", palette = "Spectral", guide = guide_colorbar(title.position = "top")) +
theme(axis.text.x=element_text(angle=90))+
facet_grid(.~coefType, scales = "free_x", space = "free_x")
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
cat('\014')
graphics.off()
wd= getwd()
library('rjags')
library('tidyverse')
library('data.table')
library('gplots')
library('stringr')
library('reshape2')
library('ggpubr')
library('ggnewscale')
library('dtw')  #time series clustering
source('G:/My Drive/20230815_GlobBurdDisease/DBDA2E-utilities_mod.R')  #modified to fit markdown
allTime_HTZ_Deaths= read.csv('G:/My Drive/20230815_GlobBurdDisease/20230823_Deaths_HTZ_21reg_MF_5year/IHME-GBD_2019_DATA-afd4b08e-1.csv',stringsAsFactors = TRUE)   #HTZ= "Tuberculosis","HIV/AIDS","Zika virus"
#limit to metric== 'Percent' and remove 'Number'
allTime_HTZ_Deaths= allTime_HTZ_Deaths[allTime_HTZ_Deaths$metric=='Percent',]
allTime_HTZ_PrevInci= read.csv('G:/My Drive/20230815_GlobBurdDisease/20230907_PrevInci_HTZ_21reg_MF_5year/IHME-GBD_2019_DATA-cacc055a-1.csv',stringsAsFactors = TRUE)
allTime_HTZ= rbind.data.frame(allTime_HTZ_Deaths,allTime_HTZ_PrevInci)
unique(allTime_HTZ$age) #this indicates entry "80-84" instead of "80-84 years" and two other such cases
levels(allTime_HTZ$age)[levels(allTime_HTZ$age)=='80-84']= '80-84 years'
levels(allTime_HTZ$age)[levels(allTime_HTZ$age)=='85-89']= '85-89 years'
levels(allTime_HTZ$age)[levels(allTime_HTZ$age)=='90-94']= '90-94 years'
levels(allTime_HTZ$age)
# Not all ages are in 5-year intervals -> remove the ones that are not
unique(allTime_HTZ$age[ str_detect(allTime_HTZ$age,'[0-9]+-[0-9]+ years')] ) #check
allTime_HTZ= allTime_HTZ[ str_detect(allTime_HTZ$age,'[0-9]+-[0-9]+ years'), ]
cause_location_tab= allTime_HTZ %>%
filter(measure=='Deaths' & sex=='Male' & age=='30-34 years' ) %>%
group_by(cause,location) %>%
summarise(count= n_distinct(year))
dim(allTime_HTZ)
head(allTime_HTZ)
str(allTime_HTZ)
#all location - cause combinations should have 30 years
all(cause_location_tab$count == 30)
allTime_HTZ$disFac= as.numeric(as.factor(allTime_HTZ$cause))
dim(allTime_HTZ)
summary(allTime_HTZ$val)
summary(allTime_HTZ$year)
hist(allTime_HTZ$val[allTime_HTZ$measure=='Deaths'],main='Death percentages - all margins')
hist(allTime_HTZ$val[allTime_HTZ$measure=='Deaths'],xlim=c(0,0.1),breaks= 200,main='Zoom: Death percentages - all margins')
hist(allTime_HTZ$val[allTime_HTZ$measure=='Prevalence'],main='Prevalence percentages - all margins')
allTime_HTZ$disFac= as.numeric(as.factor(allTime_HTZ$cause))
dim(allTime_HTZ)
summary(allTime_HTZ$val)
summary(allTime_HTZ$year)
hist(allTime_HTZ$val[allTime_HTZ$measure=='Deaths'],main='Death percentages - all margins')
hist(allTime_HTZ$val[allTime_HTZ$measure=='Deaths'],xlim=c(0,0.1),breaks= 200,main='Zoom: Death percentages - all margins')
hist(allTime_HTZ$val[allTime_HTZ$measure=='Prevalence'],main='Prevalence percentages - all margins')
allTime_HTZ_asi= data.frame( allTime_HTZ %>%   #asi= age-, sex- independent
group_by(measure,location,cause,disFac,year) %>%
summarize(val= mean(val),.group='drop') )
head(allTime_HTZ_asi)
dim(allTime_HTZ_asi)
allTime_HTZ_asi= data.frame( allTime_HTZ %>%   #asi= age-, sex- independent
group_by(measure,location,cause,disFac,year) %>%
summarize(val= mean(val),.groups='drop') )
head(allTime_HTZ_asi)
dim(allTime_HTZ_asi)
allTime_HTZ_asi_D= allTime_HTZ_asi %>%
filter(measure=='Deaths')
ggplot(data=allTime_HTZ_asi_D,mapping=aes(x=year,y=val,group=location,color=location))+
geom_point()+
geom_line()+
facet_wrap(~cause,scales='free_y')+
guides(color='none')
allTime_HTZ_asi_D_sums= allTime_HTZ_asi_D %>%
group_by(location,cause) %>%
summarize(sumPerc= sum(val),.groups='drop')
allTime_HTZ_asi_D_sums[allTime_HTZ_asi_D_sums$sumPerc==0,]
allTime_HTZ_asi_D_norm= allTime_HTZ_asi_D %>%
group_by(location,cause,disFac) %>%
mutate(val_maxNorm= val/ifelse(max(val)>0,max(val),1) ) %>%
ungroup()
ggplot(data=allTime_HTZ_asi_D_norm,mapping=aes(x=year,y=val_maxNorm,group=location,color=location))+
geom_point()+
geom_line()+
theme(axis.title.y= element_text('Normalized to highest incidence year'))+
facet_wrap(~cause,scales='free_y')+
guides(color='none')
source('G:/My Drive/20230815_GlobBurdDisease/20230905_twoLine_fit.R')
allTime_HT_asi= allTime_HTZ_asi[allTime_HTZ_asi$cause %in% c('HIV/AIDS','Tuberculosis'),]
#allTime_HT_asi_D= allTime_HT_asi[allTime_HT_asi$measure=='Deaths',]
groupedDF= allTime_HT_asi %>%
group_by(location,cause,measure) %>%
summarize(n(),.groups='drop')
dim(groupedDF) #126 combinations
head(allTime_HT_asi)
if(! file.exists('G:/My Drive/20230815_GlobBurdDisease/20230908_MCMCcoefs.csv')){ #execute only if not yet done
MCMCcoefs_DF= data.frame( matrix(NA,nrow=dim(groupedDF)[1],ncol=7))
colnames(MCMCcoefs_DF)= c('location','cause','measure',
'b0_median','b1_median','b2_median','t_inflec_median')
MCMCcoefs_DF$location <- factor(MCMCcoefs_DF$location, levels = levels(groupedDF$location))
MCMCcoefs_DF$cause <- factor(MCMCcoefs_DF$cause, levels = levels(groupedDF$cause))
MCMCcoefs_DF$measure <- factor(MCMCcoefs_DF$measure, levels = levels(groupedDF$measure))
for(i in 1:dim(groupedDF)[1]){
print(paste(i,'of',dim(groupedDF)[1]))
currDF= allTime_HT_asi[allTime_HT_asi$location==groupedDF$location[i] &
allTime_HT_asi$cause==groupedDF$cause[i] &
allTime_HT_asi$measure==groupedDF$measure[i]  ,]
mcmcDF= twoLine_fit(t= currDF$year, y=currDF$val)
HDIlower_b1= HDIofMCMC(mcmcDF$b1,credMass=.80)[1]  #lower bound of HDI -> greater than 0?
HDIupper_b2= HDIofMCMC(mcmcDF$b2,credMass=.80)[2]  #upper bound of HDI -> lower than 0?
# ! I use 80%, rather than 95% credibility intervals; while individual cases
#may be incorrectly classified, overall trends should be correct; a high false-negative
#rate needs to be avoided
#Analysis could be extended by cases cross-informing each other (e.g. countries from same
#region)
MCMCcoefs_DF$location[i]= groupedDF$location[i]
MCMCcoefs_DF$cause[i]= groupedDF$cause[i]
MCMCcoefs_DF$measure[i]= groupedDF$measure[i]
MCMCcoefs_DF$b0_median[i]= median(mcmcDF$b0)
#only store rates if confidently different from 0
MCMCcoefs_DF$b1_median[i]= ifelse(HDIlower_b1>0,median(mcmcDF$b1),NA)
MCMCcoefs_DF$b2_median[i]= ifelse(HDIupper_b2<0,median(mcmcDF$b2),NA)
#only store inflection point if both rates confidently different from 0
MCMCcoefs_DF$t_inflec_median[i]=
ifelse(HDIlower_b1>0 & HDIupper_b2<0,median(mcmcDF$t0),NA)
}
# write output so you do not need to run this code every time
write.csv(MCMCcoefs_DF,
'G:/My Drive/20230815_GlobBurdDisease/20230908_MCMCcoefs.csv',
row.names = FALSE)
} else {
MCMCcoefs_DF= read.csv('G:/My Drive/20230815_GlobBurdDisease/20230908_MCMCcoefs.csv',
stringsAsFactors=TRUE)
}
str(MCMCcoefs_DF)
dim(MCMCcoefs_DF)
